// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String   @db.Text
  expiresAt DateTime

  @@map("sessions")
}

model User {
  id          String   @id @default(uuid())
  username    String?  @unique
  password    String? // nullable because Google-auth users may not have one
  displayName String
  provider    String // e.g. "google", "local"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  studySets StudySet[]
  favorites StudySet[]    @relation("UserFavorites")
  attempts  QuizAttempt[]

  @@index([id])
  @@index([username])
  @@map("users")
}

// ---------- Study Set Model ----------
model StudySet {
  id     Int     @id @default(autoincrement())
  name   String
  public Boolean @default(false)

  // Relations
  user        User   @relation(fields: [userId], references: [id])
  userId      String
  favoritedBy User[] @relation("UserFavorites")

  deck Deck?
  quiz Quiz?

  @@index([userId])
  @@index([public])
  @@index([name])
  @@map("studySets")
}

// ---------- Flashcard Models ---------- 
model Deck {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // Relations
  studySet   StudySet    @relation(fields: [studySetId], references: [id], onDelete: Cascade)
  studySetId Int         @unique
  cards      Flashcard[]

  @@index([id])
  @@index([studySetId])
  @@map("decks")
}

model Flashcard {
  id        Int      @id @default(autoincrement())
  question  String
  answer    String
  createdAt DateTime @default(now())

  // Relations
  deck   Deck @relation(fields: [deckId], references: [id], onDelete: Cascade)
  deckId Int

  @@index([id])
  @@index([deckId])
  @@map("flashcards")
}

// ---------- Quiz Models ---------- 
model Quiz {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  highScore Int?

  // Relations
  studySet   StudySet       @relation(fields: [studySetId], references: [id], onDelete: Cascade)
  studySetId Int            @unique
  questions  QuizQuestion[]
  attempts   QuizAttempt[]

  @@index([id])
  @@index([studySetId])
  @@map("quizzes")
}

model QuizQuestion {
  id            Int    @id @default(autoincrement())
  question      String
  choices       Json // stores ["A", "B", "C", "D"]
  correctAnswer String

  // Relations
  quiz   Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId Int

  @@index([id])
  @@map("quizQuestions")
}

model QuizAttempt {
  id        Int      @id @default(autoincrement())
  score     Int
  createdAt DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId Int

  @@index([userId])
  @@index([quizId])
  @@map("quizAttempts")
}
